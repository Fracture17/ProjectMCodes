FIN = IpHuman->update() _then_ return

---

cpu level values
#const LV1 = 0
#const LV2 = 15
#const LV3 = 21
#const LV4 = 31
#const LV5 = 42
#const LV6 = 48
#const LV7 = 60
#const LV8 = 75
#const LV9 = 100

---

if aiInput->0x3C & 0x8000 == 0
  if input not already updated
  || cpuType == 0x19
    update inputs
    goto end

// maybe for nana??
if aiInput->0x3c & 0x8 == 0
&& fighterNum > 0
  goto end

if aiMgr not "ready"
  if human not updated // CHK LINE 185
  && cpuType != 0x19
  && AIPD != nullptr
    if ai can update
      move in some direction // CHK
      aiInput->0xC = 0x8000
      if has child (nana)
        nana move towards popo
        childAiInput->0xC = 0x8000
  else
    update inputs
  goto end

if aiStat->floorInfo & 0x80000000 == 0
  goto end

if human not updated // CHK
&& cpuType != 0x19
&& AIPD != nullptr
  clear buttons
  clear stick
  // something with MadeinAiData
  if aiMd != md_down
  && (aiStat->0x1ba == (0x4 || 0x6)
    || aiStat->transition_bitfield == 0xbe)
    set target to self
    change_md(md_down, -1, Nothing, 0)
  if aiMd != md_ladder 
  && aiStat->0x1ba == 0xb
    change_md(md_ladder, -1, Nothing, 0)
  if aiMd != md_piyo
  && (cpuType == 0
    || cpuType > 3)
  && aiStat->0x1ba == 0x9
    if aiScript == Defensive_Shield (0x3020)
      modifications to:
        - aiInput->0x78
        - aiInput->0x7C
        - aiInput->0x80
      change_md(md_piyo, -1, Nothing, 0)
  if aiMd != md_dragoon
  && aiStat->0x1ba == 0x0f
    change_md(md_dragoon, -1, Nothing, 0)
  if aiScript == Unk1100_act_a_goro
  && aiStat->floorInfo & 0x20 != 0
    switch(aiMd)
      default:
        change_md(0x65, get_nearest_target(), Unk1100_act_a_goro, 0)
      md_defend:
      md_away_5:
      md_away_7:
      md_slide:
      md_away_16:
        change_md(0x66, get_nearest_target(), Unk1100_act_a_goro, 0)
    aiAct->0x111 = 0
  if aiScript != JumpOnStage_act_r_jump_aft_shot
  && aiScript != OnGotDamaged_act_r_fall
  && aiStat->0x1ba == 0x0e
    aiScript => JumpOnStage_act_r_jump_aft_shot
    if over ground
      aiScript => OnGotDamaged_act_r_fall
    change_md(md_defend, -1, aiScript, 0)
  if aiMd != md_catch
  && aiStat->0x1ba == 0xA
    change_md(md_catch, -1, Nothing, 0)
  if aiMd != md_swim
  && aiStat->0x1ba == 0xC
    change_md(md_swim, -1, Nothing, 0)
  if aiMd != md_glide
  && aiStat->0x1ba == 0x10
    change_md(md_glide, -1, Nothing, 0)
  if aiStat->0x1ba == 0xD
  && rand() < UNKNOWN_DOUBLE // CHK
    inputs |= Jump
  if aiMd !=
    md_away_7,
    md_away_16,
    md_return,
    md_down,
    md_ladder,
    md_piyo,
    md_dragoon,
    md_catch,
    md_swim,
    md_glide,
    md_slide,
    md_final
  && aiStat->floorInfo & 0x800 == 0
    if aiMd == md_hammer
    || aiStat->floorInfo & 0x1000 == 0
      // CHK THIS WHOLE THING
      if aiInput->recoveryTimer < 1
        * bool unk = true
        * float ownWidth

        if "final" (golden hammer)
          unk = false

        if (((unk)
            && aiStat->floorInfo & 0x10000 != 0)
          || aiStat->position.y < (DATA + aiMgr->0x36c))
        || (aiStat->position.x < (widthThing + aiMgr->0x360)
          || (aiMgr->0x364 - widthThing) < aiStat->position.x)
          * targetAiStat
          * targetWidth

          if ((DATA + targetWidth) + aiMgr->0x360) <= aiStat->position.x
          || (aiStat->position.x <= targetAiStat->position.x
            && aiStat->position.x <= (aiMgr->0x364 - (DATA + targetWidth)))
          || targetAiStat->position.x <= aiStat0->0x5c
            change_md(md_away_7, -1, Nothing, 0)
        else
          * int unk2 = aiMgr->0x370

          if unk2 == 8
            if aiStat->position.y < aiInput->0xb8
              change_md(md_away_7, -1, Nothing 0)
          else if unk2 < 8
            if unk2 == 5
            && aiStat->position.x < aiInput->0xbc
              change_md(md_away_7, -1, Nothing, 0)
          else if unk2 == 0x1c
          && ptr(aiStat->0xbc + 0x40) & 0x1000 != 0
            change_md(md_away_7, -1, Nothing, 0)
      if aiMd == md_away_7
        goto end
    else
      aiInput->recoveryTimer -= 1
    if aiInput->0x63 < 0x1
      if (aiStat->floorInfo & 0x40 != 0
          && ((grFree || airFree) 
        || aiStat->0x1ac == 0xd))
      && (aiMd != md_item_shoot
        || aiInput->0x50 > 1 
        && aiInput->0x50 < 10
        && aiInput->0x54 > 0x46)
        * int unk3 = 0
        if aiStat->0x1ac == 0xd
          unk3 = 0xd
        else
          * targetAiStat
          if aiMd == md_chase_6
            if aiStat->0x1b0 & 1 != 0
            && aiStat->0x1ac != 0
            && aiStat->0x1ac != 0x2a
              unk3 = 0xd
          // "regular" ai modes
          else if 0 < aiMd < 3
            * iVar9 = aiStat->0x1ac
            if iVar9 == 0x21
              goto $LAB_CCA0
            if iVar9 < 0x21
              if iVar9 == 0x12
                goto $LAB_CEA4
              if iVar9 < 0x12
                if iVar9 == 0x4
                $LAB_CCA0:
                if iVar9 == 0x21
                  if DATA < targetAiStat->damage
                  && rand() < DATA(0.7)
                    unk3 = 0xd
                else if iVar9 < 0x21
                  if iVar9 == 0x1f
                    * levelValue = aiParam.levelValue
                    * unk6 = rand()
                    if unk6 < DATA * DOUBLE_CONVERT(levelValue)
                      unk3 = 0xd
                  else if iVar9 < 0x1f
                  && iVar9 == 4
                  && DATA < aiStat->damage
                  && (unk6 = rand()) < DATA
                    unk3 = 0xd
                else if iVar9 == 0x3a
                  $LAB_CD7C:
                  if aiStat->0x1b4 < 1
                    unk3 = 0xd
                else if iVar9 < 0x3a && iVar9 == 0x2e
                  if targetAiStat->damage < DATA
                    goto $LAB_CD7C
                  unk3 = 0xd
                  if unk3 == 0xd
                    * levelValue = aiParam.levelValue
                    * relTargetXPos = 0
                    * relTargetYPos = 0
                    if levelValue < 0x14
                      relTargetXPos = targetAiStat->TopNPos.x
                      relTargetYPos = targetAiStat->TopNPos.y
                    else
                      * unk10 = levelValue - 0x14
                      * xVelDiff = targetAiStat->Velocity.x - aiStat->Velocity.x
                      * yVelDiff = targetAiStat->Velocity.y - aiStat->Velocity.y
                      // CHK 0.375
                      relTargetXPos = xVelDiff * 0.375 + targetAIStat->TopNPos.x
                      relTargetYPos = yVelDiff * 0.375 + targetAIStat->TopNPos.y
                    targetWidth = get_width(targetAiStat)
                    ownWidth = get_width(aiStat)
                    * fVar4 = ownAiStat->direction * (relTargetXPos - ownAiStat->TopNPos.x) - (ownWidth + targetWidth)
                    if 20 <= fVar4 <= 100
                    || 15 * targetAiStat->Scale.y <= ABS(aiStat->TopNPos.y - relTargetYPos)
                      unk3 = 0
                  goto $LAB_CF8C
              else if iVar9 == 0x1f
                goto $LAB_CCA0
            else
              if iVar9 != 0x36
                if iVar9 < 0x36
                  if (iVar9 == 0x2e)
                    goto $LAB_CCA0
                else if iVar9 == 0x3a
                  goto $LAB_CCA0
                goto $LAB_CF38
              
              
              //

#############################################33
UPDATE AISTAT                
#############################################33
